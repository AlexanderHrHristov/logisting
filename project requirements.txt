Individual Project Assignment

Project Assignment for the Django Advanced Course @ SoftUni

1. General Requirements

Your Web application should use the following technologies, frameworks, and development techniques:

+ The application must be implemented using the Django Framework
+ The application must have at least 5 templates.
+ Use a Database Service of your choice.
+ Use Django Template Engine or make the Front-End using JavaScript.
+ The application must have a public part (Part of the website, accessible by everyone - anonymous,
authenticated users, and admins).
+ The application must have a private part (accessible only by authenticated users and admins).
+ Templates (your views must return HTML files) - A template can be reused (used multiple times)
according to the project's functionality.
+ The application must have login/register/logout functionality.
+ Implement a Web Page Design based on Bootstrap/Google Material Design or design your own.
+ The application must have a customized admin site (accessible only by admins):
+ Authenticated users (private part) have full CRUD access to their content (owners).
+ Admin Groups (at least 2 groups of admins):
+ One must have permissions for full CRUD functionalities (superusers).
+ While others have permissions for limited CRUD functionalities (staff).
+ User roles should be managed from the admin site.
+ Role management must be secure and error-safe.
+ Add at least 5 custom options (in total) to the admin interface (e.g., filters, list display,
ordering, etc.).
+ Unauthenticated users (public part) have only 'get' permissions, e.g., landing page, details,
about page, and login/register 'post' permissions.


- The application must have at least 10 web pages:

- They can be created using function-based views or class-based views.

- At least 5 of them must be class-based views.

- The application must have at least 5 independent models (models created by extending, inheritance,
and one-to-one relation are considered one model).

- The application must have at least 5 forms.

- Optionally, you can utilize multiple storage systems (e.g., files, other Web services, and databases
like PostgreSQL/MySQL/MariaDB/Oracle, etc.)

- Implement Exception Handling and Data Validation to avoid crashes when invalid data is
entered (both client-side and server-side)

- When validating data, show appropriate messages to the user

- You must implement a new "main" functionality! It is considered two additional views with
CRUD operations that extend your current project. This should be done for a logged-in user.